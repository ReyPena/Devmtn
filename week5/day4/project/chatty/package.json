{
  "name": "chatty",
  "version": "1.0.0",
  "description": "* First we'll follow the beginning steps from this morning's mini project. First create a `.gitignore` file, open it in your editor, and add `node_modules`. Then, `npm init` and `npm install express --save`. This will download the Express library and save it to your package.json. * In server.js, import the 'express' module and initialize it by calling `var app = express()`. Now you can use the `app.listen` method on a port of your choice (between 8000 and 12000 is usual). Note that you will need to adjust the endpoints in the Angular service to match the port you choose. * Create an array for storing your messages temporarily. You could call it `messages`. Think about where this should be stored so that the data 'persists' between requests. * Write a new GET endpoint that returns a JSON stringified response of your messages array. It will look something like this: ```javascript app.get('/', function( req, res ) {   res.send(JSON.stringify(messages)); }); ``` You might remember from this morning's project that your browser won't want to work without you supplying the appropriate headers, so let's go ahead and add those to the endpoint. ```javascript app.get('/', function( req, res ) {   res.status(200).set({     'Content-Type': 'application/json',     'Access-Control-Allow-Origin': '*',     'Access-Control-Allow-Methods': 'OPTIONS, GET, POST',     'Access-Control-Allow-Headers': 'Origin, X-Requested-With, Content-Type, Accept',     'X-XSS-Protection': '1; mode=block',     'X-Frame-Options': 'SAMEORIGIN',     'Content-Security-Policy': \"default-src 'self' devmountain.github.io\"   }).send(JSON.stringify(messages)); }); ```",
  "main": "server.js",
  "scripts": {
    "test": "echo \"Error: no test specified\" && exit 1",
    "start": "node server.js"
  },
  "author": "",
  "license": "ISC",
  "dependencies": {
    "body-parser": "^1.14.1",
    "express": "^4.13.3"
  }
}
